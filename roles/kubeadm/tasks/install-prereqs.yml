---
#Ensure the docker repo is available
- name: Ensure /etc/apt/keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download and store Kubernetes GPG key
  command: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes APT repository
  copy:
    dest: "/etc/apt/sources.list.d/kubernetes.list"
    content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"

- name: Get Kubernetes GPG Key ID dynamically
  shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dry-run --import --import-options show-only"
  register: gpg_key_output

- name: Extract the full Kubernetes GPG Key ID
  set_fact:
    kube_full_gpg_key: "{{ (gpg_key_output.stdout | regex_search('([A-F0-9]{40})', '\\1'))[0] }}"

- name: Extract the last 16 characters of the GPG Key ID
  set_fact:
    kube_gpg_key: "{{ kube_full_gpg_key[-16:] }}"

- name: Debug - Show extracted GPG Key ID
  debug:
    msg: "Extracted Kubernetes GPG Key: {{ kube_gpg_key }}" 

- name: Force APT to recognize the key
  command: "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys {{ kube_gpg_key }}"
  ignore_errors: yes  # Ignore failures in case it's already added

- name: Update and Upgrade Packages
  apt:
    update_cache: yes
    upgrade: yes

- name: Install Required Packages
  apt:
    name:
      - apt-transport-https
      - curl
      - containerd
      - kubectl
      - kubelet
      - kubeadm
    state: present     

- name: Hold Kubernetes packages to prevent upgrades
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
